{"mappings":"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","sources":["/home/runner/work/carleton-web-dev/carleton-web-dev/node_modules/@parcel/scope-hoisting/lib/prelude.js","src/wc-course-website/components/lecture/index.js","src/wc-course-website/components/lectures/index.js"],"names":["$parcel$modules","$parcel$bundles","globalObject","globalThis","self","window","global","parcelRequire","name","module","require","err","Error","code","register","id","exports","registerBundle","fn","Lecture","_this","$f09ff9c85a1a155fe0c1bcd4dcd9361e$var$_classCallCheck","this","_super","call","lectureTemplateId","lectureData","render","classList","add","lecture","query","URL","location","toString","searchParams","has","lectureId","get","$b2736226bbcf175e104b7e710aa92180$init","databaseManager","getLecture","lectureNode","document","querySelector","content","cloneNode","title","href","$efb332d8ccb9a6b3f962ac63aa3525c$init","createUrl","$loki","innerText","unit","deletePath","getAttribute","onclick","deleteLecture","slidesTemplate","recordings","slides","forEach","slide","node","appendChild","createTextNode","recordingsTemplate","recording","codeTemplate","innerHTML","$dc4bd82eadd83b135ac82ece8b7911c$init","DatabaseConsumer","HTMLDivElement","customElements","define","extends","Lectures","$bd881d7cc09a0c9d7c12c0efa63f$var$_classCallCheck","lecturesTemplateId","lectures","getLectures","lecturesNode","container","$f09ff9c85a1a155fe0c1bcd4dcd9361e$export$Lecture","close","modal","onsubmit","event","preventDefault","target","value","addLecture","HTMLElement"],"version":3,"file":"lectures.e04259df.js.map","sourcesContent":[null,"import { databaseManager } from '../../database';\nimport { DatabaseConsumer } from '../base/databaseConsumer';\nimport { createUrl } from '../../utilities/createUrl';\n\n/**\n * A component that will render a single lectures's panel. Will render the lecture passed trough properties or\n * through the `lecture` search param. All events are handled internally through the database manager.\n *\n * This element extends the base div element and will need to created as `<div is=\"single-lecture\">`\n *\n * @prop {Lecture} lecture - Write only lecture property to define which lecture to render.\n *\n * @element single-lecture\n */\nexport class Lecture extends DatabaseConsumer(window.HTMLDivElement) {\n  constructor() {\n    super();\n\n    this.lectureTemplateId = '#single-lecture';\n\n    this.lectureData = null;\n  }\n\n  notified() {\n    this.render();\n  }\n\n  set lecture(lecture) {\n    this.lectureData = lecture;\n    this.render();\n  }\n\n  render() {\n    this.classList.add('panel');\n    this.classList.add('is-primary');\n\n    let lecture = null;\n    const query = new window.URL(window.location.toString());\n    if (this.lectureData) {\n      lecture = this.lectureData;\n    } else if (query.searchParams.has('lecture')) {\n      const lectureId = query.searchParams.get('lecture');\n      lecture = databaseManager.getLecture(lectureId);\n    } else {\n      return;\n    }\n\n    if (!lecture) {\n      return;\n    }\n\n    const lectureTemplate = document.querySelector(this.lectureTemplateId).content;\n    const lectureNode = lectureTemplate.cloneNode(true);\n\n    const title = lectureNode.querySelector('[data-element=\"title-link\"]');\n    title.href = createUrl('lecture', lecture.$loki);\n    title.innerText = lecture.unit;\n\n    const deletePath = this.getAttribute('delete-path');\n    const deleteButton = lectureNode.querySelector('[data-element=\"delete-button\"]');\n    deleteButton.onclick = () => {\n      databaseManager.deleteLecture(lecture);\n      if (deletePath) {\n        window.location.href = deletePath;\n      }\n    };\n\n    const slidesTemplate = lectureNode.querySelector('[data-list=\"slides\"]').content;\n    if (lecture.recordings) {\n      lecture.slides.forEach(slide => {\n        const node = slidesTemplate.cloneNode(true);\n        const container = node.querySelector('div');\n        container.appendChild(document.createTextNode(slide.title));\n        lectureNode.appendChild(node);\n      });\n    }\n\n    const recordingsTemplate = lectureNode.querySelector('[data-list=\"recordings\"]').content;\n    if (lecture.recordings) {\n      lecture.recordings.forEach(recording => {\n        const node = recordingsTemplate.cloneNode(true);\n        const container = node.querySelector('div');\n        container.appendChild(document.createTextNode(recording.title));\n        lectureNode.appendChild(node);\n      });\n    }\n\n    const codeTemplate = lectureNode.querySelector('[data-list=\"code\"]').content;\n    if (lecture.code) {\n      lecture.code.forEach(code => {\n        const node = codeTemplate.cloneNode(true);\n        const container = node.querySelector('div');\n        container.appendChild(document.createTextNode(code.title));\n        lectureNode.appendChild(node);\n      });\n    }\n\n    this.innerHTML = '';\n    this.appendChild(lectureNode);\n  }\n}\n\nwindow.customElements.define('single-lecture', Lecture, { extends: 'div' });\n","import { databaseManager } from '../../database';\nimport { DatabaseConsumer } from '../base/databaseConsumer';\nimport { Lecture } from '../lecture';\nimport { createUrl } from '../../utilities/createUrl';\n\n/**\n * List of lectures from the database. Will render all lectures without any filtering or sorting.\n *\n * @element lectures-list\n */\nexport class Lectures extends DatabaseConsumer(window.HTMLElement) {\n  constructor() {\n    super();\n\n    this.lecturesTemplateId = '#lectures-list';\n  }\n\n  notified() {\n    this.render();\n  }\n\n  render() {\n    const lectures = databaseManager.getLectures();\n\n    const lecturesTemplate = document.querySelector(this.lecturesTemplateId).content;\n    const lecturesNode = lecturesTemplate.cloneNode(true);\n    const container = lecturesNode.querySelector('[data-element=\"lectures\"]');\n\n    lectures.forEach(lecture => {\n      const node = new Lecture();\n      node.lecture = lecture;\n      container.appendChild(node);\n    });\n\n    const query = new window.URL(window.location.toString());\n    if (query.searchParams.has('new')) {\n      const close = () => {\n        window.location.href = createUrl('lectures');\n      };\n\n      const modal = lecturesNode.querySelector('[data-element=\"new-modal\"]');\n      modal.classList.add('is-active');\n\n      modal.querySelector('[data-element=\"new-form\"]').onsubmit = event => {\n        event.preventDefault();\n\n        const name = event.target.querySelector('input').value;\n\n        const lecture = databaseManager.addLecture(name);\n        window.location.href = createUrl('lecture', lecture.$loki);\n      };\n\n      modal.querySelector('[data-element=\"cancel-button\"]').onclick = close;\n      modal.querySelector('[data-element=\"close-button\"]').onclick = close;\n    }\n\n    this.innerHTML = '';\n    this.appendChild(lecturesNode);\n  }\n}\n\nwindow.customElements.define('lectures-list', Lectures);\n"]}