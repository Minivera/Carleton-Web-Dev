{"mappings":"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","sources":["node_modules/lit-html/lib/directive.js","node_modules/lit-html/lib/dom.js","node_modules/lit-html/lib/part.js","node_modules/lit-html/lib/template.js","node_modules/lit-html/lib/template-instance.js","node_modules/lit-html/lib/template-result.js","node_modules/lit-html/lib/parts.js","node_modules/lit-html/lib/default-template-processor.js","node_modules/lit-html/lib/template-factory.js","node_modules/lit-html/lib/render.js","node_modules/lit-html/lit-html.js","node_modules/haunted/lib/interface.js","node_modules/haunted/lib/symbols.js","node_modules/haunted/lib/state.js","node_modules/haunted/lib/scheduler.js","node_modules/haunted/lib/component.js","node_modules/haunted/lib/hook.js","node_modules/haunted/lib/create-effect.js","node_modules/haunted/lib/use-effect.js","node_modules/haunted/lib/use-context.js","node_modules/haunted/lib/use-memo.js","node_modules/haunted/lib/use-layout-effect.js","node_modules/haunted/lib/use-state.js","node_modules/haunted/lib/use-reducer.js","node_modules/haunted/lib/virtual.js","node_modules/haunted/lib/lit-haunted.js","node_modules/haunted/lib/core.js","node_modules/haunted/lib/create-context.js","src/wc-todo/model/todoModel.js","src/wc-todo/components/app.js","node_modules/classnames/index.js","src/wc-todo/components/footer.js","/home/runner/work/carleton-web-dev/carleton-web-dev/node_modules/@parcel/scope-hoisting/lib/helpers.js","src/wc-todo/components/todoItem.js"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","constructor","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","update","setValue","commit","_clone","fragment","$afc939c7c5d810a58b6f6c764fd2ba0$export$isCEPolyfill","cloneNode","importNode","nodeIndex","$d5405013661362974ab8aadce3a$export$isTemplatePartActive","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","$d5405013661362974ab8aadce3a$export$marker","TemplateResult","getHTML","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","$d5405013661362974ab8aadce3a$export$lastAttributeNameRegex","$d5405013661362974ab8aadce3a$export$nodeMarker","substr","getTemplateElement","createElement","innerHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","_getValue","text","v","t","setAttribute","committer","$b478d0b8d04c59babf0dfa302e3c29f3$export$noChange","$d51d45dc4036e69dbe4bec7f5259b0c1$export$isDirective","directive","NodePart","__pendingValue","appendInto","startNode","appendChild","$d5405013661362974ab8aadce3a$export$createMarker","endNode","ref","appendIntoPart","__insert","insertAfterPart","__commitText","$a1f34473a7af74b422f2326723e3ce$export$TemplateResult","__commitTemplateResult","Node","__commitNode","__commitIterable","$b478d0b8d04c59babf0dfa302e3c29f3$export$nothing","clear","valueAsString","templateFactory","$f22d6e3eda0c083e20b37e5e04a0827$export$TemplateInstance","instance","itemParts","itemPart","item","$afc939c7c5d810a58b6f6c764fd2ba0$export$removeNodes","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","$bb72de37ac03dc72a42e3d3f793c$export$PropertyCommitter","$bb72de37ac03dc72a42e3d3f793c$export$EventPart","$bb72de37ac03dc72a42e3d3f793c$export$BooleanAttributePart","$bb72de37ac03dc72a42e3d3f793c$export$AttributeCommitter","$bb72de37ac03dc72a42e3d3f793c$export$NodePart","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","$d5405013661362974ab8aadce3a$export$Template","$f508742e27d4dc8374d831392dc796d$export$defaultTemplateProcessor","current","currentId","setCurrent","state","phaseSymbol","hookSymbol","updateSymbol","commitSymbol","effectsSymbol","layoutEffectsSymbol","State","host","$f7f81a40dfcac9ead02bdd3d0249e9f0$export$hookSymbol","$f7f81a40dfcac9ead02bdd3d0249e9f0$export$effectsSymbol","$f7f81a40dfcac9ead02bdd3d0249e9f0$export$layoutEffectsSymbol","run","cb","$e15f181a492da3b6359005dcdc5cc0d9$export$setCurrent","res","$e15f181a492da3b6359005dcdc5cc0d9$export$clear","_runEffects","phase","effects","effect","runEffects","runLayoutEffects","teardown","forEach","hook","defer","Promise","resolve","then","bind","runner","id","tasks","runTasks","len","task","read","write","BaseScheduler","renderer","$fc96a7a74342442d63d1813ce37e83e$export$State","$f7f81a40dfcac9ead02bdd3d0249e9f0$export$phaseSymbol","_updateQueued","handlePhase","$f7f81a40dfcac9ead02bdd3d0249e9f0$export$updateSymbol","$f7f81a40dfcac9ead02bdd3d0249e9f0$export$commitSymbol","arg","render","makeComponent","Scheduler","$b071449bdacd596aa68c451b8d3f7$export$BaseScheduler","frag","baseElementOrOptions","BaseElement","baseElement","HTMLElement","observedAttributes","useShadowDOM","shadowRootInit","Element","_scheduler","attachShadow","mode","shadowRoot","connectedCallback","disconnectedCallback","attributeChangedCallback","oldValue","newValue","val","Reflect","replace","_","char","toUpperCase","toCamelCase","proto","Proxy","prototype","getPrototypeOf","target","receiver","desc","Object","getOwnPropertyDescriptor","enumerable","configurable","writable","initialValue","freeze","reflectiveProp","defineProperty","setPrototypeOf","Hook","use","args","hooks","$e15f181a492da3b6359005dcdc5cc0d9$export$current","createEffect","setEffects","$f17991851a5a6eef653941707a46d8$export$hook","$f17991851a5a6eef653941707a46d8$export$Hook","ignored1","ignored2","callback","lastValues","hasChanged","_teardown","some","$eeb397ac44a524ec464f96e38$export$createEffect","useContext","_updater","_ranEffect","_unsubscribe","$a03207a2232fde7b970c9e3549853cd$export$setEffects","Context","virtual","_subscribe","detail","dispatchEvent","CustomEvent","bubbles","cancelable","composed","unsubscribe","defaultValue","fn","useState","updater","makeArgs","updaterFn","previousValue","initialState","init","dispatch","currentState","reducer","action","includes","component","createContext","$efa413c7fff40e0349d010b0b3f4eb3$export$makeComponent","Provider","listeners","Set","add","stopPropagation","delete","_value","Consumer","$c48fe942358e594c70a352a29ef730e$export$useContext","$fd001fc051cc00a169fc0fd62a3b11b$export$makeContext","$dc596ce3d85b49f6119c2c4aa80bd894$export$default","firstChild","assign","$b752b3d87054a6ff2bc85ece4e55a3a$export$templateFactory","partToScheduler","schedulerToPart","apply","$d842519d0f401d5cd92ebc48f$export$makeVirtual","define","$c88fa8b598ea4a1955b32dea00e407b$export$component","_useState2","$b14cb57f70415a4e764ea9cbf0dfcc6c$var$_slicedToArray","$d04042dd2550723dde1f325d8550$export$useState","nowShowing","setNowShowing","model","$c7dacad41d7f23061dec0f3b677c40c3$var$_slicedToArray","todos","setTodos","addTodo","title","concat","completed","editTodo","newTitle","map","todo","$c7dacad41d7f23061dec0f3b677c40c3$var$_objectSpread","removeTodo","filter","all","$c7dacad41d7f23061dec0f3b677c40c3$var$_toConsumableArray","toggleAll","checked","arguments","toggle","$c7dacad41d7f23061dec0f3b677c40c3$export$default","shownTodos","activeTodoCount","reduce","accum","completedCount","$aa64f37d139a27caafe83215b1a77e8$export$html","$b14cb57f70415a4e764ea9cbf0dfcc6c$var$_templateObject","preventDefault","trim","$b14cb57f70415a4e764ea9cbf0dfcc6c$var$_templateObject2","$b14cb57f70415a4e764ea9cbf0dfcc6c$var$_templateObject3","$b14cb57f70415a4e764ea9cbf0dfcc6c$var$_templateObject4","label","hasOwn","hasOwnProperty","classNames","classes","argType","inner","$dc5118610df5cc910ea040e1de8e$exports","default","a","__esModule","Footer","_ref","_this","console","log","activeTodoWord","handleShowing","showLabel","clearButton","$ae72d9b6279f5151e7b8bd38f01af6b$var$_templateObject","$ae72d9b6279f5151e7b8bd38f01af6b$var$_templateObject2","$dc5118610df5cc910ea040e1de8e$$interop$default","selected","TodoItem","$b342c0872d08b29586be90b3b73930$var$_slicedToArray","isEditing","setIsEditing","handleSubmit","$b342c0872d08b29586be90b3b73930$var$_templateObject","editing"],"version":3,"file":"wc-todo.e2de5c57.js.map","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","let current;\nlet currentId = 0;\nfunction setCurrent(state) {\n    current = state;\n}\nfunction clear() {\n    current = null;\n    currentId = 0;\n}\nfunction notify() {\n    return currentId++;\n}\nexport { clear, current, setCurrent, notify };\n","const phaseSymbol = Symbol('haunted.phase');\nconst hookSymbol = Symbol('haunted.hook');\nconst updateSymbol = Symbol('haunted.update');\nconst commitSymbol = Symbol('haunted.commit');\nconst effectsSymbol = Symbol('haunted.effects');\nconst layoutEffectsSymbol = Symbol('haunted.layoutEffects');\nconst contextEvent = 'haunted.context';\nexport { phaseSymbol, hookSymbol, updateSymbol, commitSymbol, effectsSymbol, layoutEffectsSymbol, contextEvent, };\n","import { setCurrent, clear } from './interface';\nimport { hookSymbol, effectsSymbol, layoutEffectsSymbol } from './symbols';\nclass State {\n    constructor(update, host) {\n        this.update = update;\n        this.host = host;\n        this[hookSymbol] = new Map();\n        this[effectsSymbol] = [];\n        this[layoutEffectsSymbol] = [];\n    }\n    run(cb) {\n        setCurrent(this);\n        let res = cb();\n        clear();\n        return res;\n    }\n    _runEffects(phase) {\n        let effects = this[phase];\n        setCurrent(this);\n        for (let effect of effects) {\n            effect.call(this);\n        }\n        clear();\n    }\n    runEffects() {\n        this._runEffects(effectsSymbol);\n    }\n    runLayoutEffects() {\n        this._runEffects(layoutEffectsSymbol);\n    }\n    teardown() {\n        let hooks = this[hookSymbol];\n        hooks.forEach(hook => {\n            if (typeof hook.teardown === 'function') {\n                hook.teardown();\n            }\n        });\n    }\n}\nexport { State };\n","import { State } from './state';\nimport { commitSymbol, phaseSymbol, updateSymbol, effectsSymbol, layoutEffectsSymbol } from './symbols';\nconst defer = Promise.resolve().then.bind(Promise.resolve());\nfunction runner() {\n    let tasks = [];\n    let id;\n    function runTasks() {\n        id = null;\n        let t = tasks;\n        tasks = [];\n        for (var i = 0, len = t.length; i < len; i++) {\n            t[i]();\n        }\n    }\n    return function (task) {\n        tasks.push(task);\n        if (id == null) {\n            id = defer(runTasks);\n        }\n    };\n}\nconst read = runner();\nconst write = runner();\nclass BaseScheduler {\n    constructor(renderer, host) {\n        this.renderer = renderer;\n        this.host = host;\n        this.state = new State(this.update.bind(this), host);\n        this[phaseSymbol] = null;\n        this._updateQueued = false;\n    }\n    update() {\n        if (this._updateQueued)\n            return;\n        read(() => {\n            let result = this.handlePhase(updateSymbol);\n            write(() => {\n                this.handlePhase(commitSymbol, result);\n                write(() => {\n                    this.handlePhase(effectsSymbol);\n                });\n            });\n            this._updateQueued = false;\n        });\n        this._updateQueued = true;\n    }\n    handlePhase(phase, arg) {\n        this[phaseSymbol] = phase;\n        switch (phase) {\n            case commitSymbol:\n                this.commit(arg);\n                this.runEffects(layoutEffectsSymbol);\n                return;\n            case updateSymbol: return this.render();\n            case effectsSymbol: return this.runEffects(effectsSymbol);\n        }\n        this[phaseSymbol] = null;\n    }\n    render() {\n        return this.state.run(() => this.renderer.call(this.host, this.host));\n    }\n    runEffects(phase) {\n        this.state._runEffects(phase);\n    }\n    teardown() {\n        this.state.teardown();\n    }\n}\nexport { BaseScheduler };\n","import { BaseScheduler } from './scheduler';\nconst toCamelCase = (val = '') => val.replace(/-+([a-z])?/g, (_, char) => char ? char.toUpperCase() : '');\nfunction makeComponent(render) {\n    class Scheduler extends BaseScheduler {\n        constructor(renderer, frag, host) {\n            super(renderer, host || frag);\n            this.frag = frag;\n        }\n        commit(result) {\n            render(result, this.frag);\n        }\n    }\n    function component(renderer, baseElementOrOptions, options) {\n        const BaseElement = (options || baseElementOrOptions || {}).baseElement || HTMLElement;\n        const { observedAttributes = [], useShadowDOM = true, shadowRootInit = {} } = options || baseElementOrOptions || {};\n        class Element extends BaseElement {\n            constructor() {\n                super();\n                if (useShadowDOM === false) {\n                    this._scheduler = new Scheduler(renderer, this);\n                }\n                else {\n                    this.attachShadow({ mode: 'open', ...shadowRootInit });\n                    this._scheduler = new Scheduler(renderer, this.shadowRoot, this);\n                }\n            }\n            static get observedAttributes() {\n                return renderer.observedAttributes || observedAttributes || [];\n            }\n            connectedCallback() {\n                this._scheduler.update();\n            }\n            disconnectedCallback() {\n                this._scheduler.teardown();\n            }\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (oldValue === newValue) {\n                    return;\n                }\n                let val = newValue === '' ? true : newValue;\n                Reflect.set(this, toCamelCase(name), val);\n            }\n        }\n        ;\n        function reflectiveProp(initialValue) {\n            let value = initialValue;\n            return Object.freeze({\n                enumerable: true,\n                configurable: true,\n                get() {\n                    return value;\n                },\n                set(newValue) {\n                    value = newValue;\n                    this._scheduler.update();\n                }\n            });\n        }\n        const proto = new Proxy(BaseElement.prototype, {\n            getPrototypeOf(target) {\n                return target;\n            },\n            set(target, key, value, receiver) {\n                let desc;\n                if (key in target) {\n                    desc = Object.getOwnPropertyDescriptor(target, key);\n                    if (desc && desc.set) {\n                        desc.set.call(receiver, value);\n                        return true;\n                    }\n                    Reflect.set(target, key, value);\n                }\n                if (typeof key === 'symbol' || key[0] === '_') {\n                    desc = {\n                        enumerable: true,\n                        configurable: true,\n                        writable: true,\n                        value\n                    };\n                }\n                else {\n                    desc = reflectiveProp(value);\n                }\n                Object.defineProperty(receiver, key, desc);\n                if (desc.set) {\n                    desc.set.call(receiver, value);\n                }\n                return true;\n            }\n        });\n        Object.setPrototypeOf(Element.prototype, proto);\n        return Element;\n    }\n    return component;\n}\nexport { makeComponent };\n","import { current, notify } from './interface';\nimport { hookSymbol } from './symbols';\nclass Hook {\n    constructor(id, state) {\n        this.id = id;\n        this.state = state;\n    }\n}\nfunction use(Hook, ...args) {\n    let id = notify();\n    let hooks = current[hookSymbol];\n    let hook = hooks.get(id);\n    if (!hook) {\n        hook = new Hook(id, current, ...args);\n        hooks.set(id, hook);\n    }\n    return hook.update(...args);\n}\nfunction hook(Hook) {\n    return use.bind(null, Hook);\n}\nexport { hook, Hook };\n","import { Hook, hook } from './hook';\nfunction createEffect(setEffects) {\n    return hook(class extends Hook {\n        constructor(id, state, ignored1, ignored2) {\n            super(id, state);\n            setEffects(state, this);\n        }\n        update(callback, values) {\n            this.callback = callback;\n            this.lastValues = this.values;\n            this.values = values;\n        }\n        call() {\n            if (!this.values || this.hasChanged()) {\n                this.run();\n            }\n        }\n        run() {\n            this.teardown();\n            this._teardown = this.callback.call(this.state);\n        }\n        teardown() {\n            if (typeof this._teardown === 'function') {\n                this._teardown();\n            }\n        }\n        hasChanged() {\n            return !this.lastValues || this.values.some((value, i) => this.lastValues[i] !== value);\n        }\n    });\n}\nexport { createEffect };\n","import { effectsSymbol } from './symbols';\nimport { createEffect } from './create-effect';\nfunction setEffects(state, cb) {\n    state[effectsSymbol].push(cb);\n}\nconst useEffect = createEffect(setEffects);\nexport { setEffects, useEffect };\n","import { hook, Hook } from './hook';\nimport { contextEvent } from './symbols';\nimport { setEffects } from './use-effect';\nconst useContext = hook(class extends Hook {\n    constructor(id, state, _) {\n        super(id, state);\n        this._updater = this._updater.bind(this);\n        this._ranEffect = false;\n        this._unsubscribe = null;\n        setEffects(state, this);\n    }\n    update(Context) {\n        if (this.state.virtual) {\n            throw new Error('can\\'t be used with virtual components');\n        }\n        if (this.Context !== Context) {\n            this._subscribe(Context);\n            this.Context = Context;\n        }\n        return this.value;\n    }\n    call() {\n        if (!this._ranEffect) {\n            this._ranEffect = true;\n            if (this._unsubscribe)\n                this._unsubscribe();\n            this._subscribe(this.Context);\n            this.state.update();\n        }\n    }\n    _updater(value) {\n        this.value = value;\n        this.state.update();\n    }\n    _subscribe(Context) {\n        const detail = { Context, callback: this._updater };\n        this.state.host.dispatchEvent(new CustomEvent(contextEvent, {\n            detail,\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n        }));\n        const { unsubscribe, value } = detail;\n        this.value = unsubscribe ? value : Context.defaultValue;\n        this._unsubscribe = unsubscribe;\n    }\n    teardown() {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n    }\n});\nexport { useContext };\n","import { hook, Hook } from './hook';\nconst useMemo = hook(class extends Hook {\n    constructor(id, state, fn, values) {\n        super(id, state);\n        this.value = fn();\n        this.values = values;\n    }\n    update(fn, values) {\n        if (this.hasChanged(values)) {\n            this.values = values;\n            this.value = fn();\n        }\n        return this.value;\n    }\n    hasChanged(values = []) {\n        return values.some((value, i) => this.values[i] !== value);\n    }\n});\nexport { useMemo };\n","import { layoutEffectsSymbol } from './symbols';\nimport { createEffect } from './create-effect';\nfunction setLayoutEffects(state, cb) {\n    state[layoutEffectsSymbol].push(cb);\n}\nconst useLayoutEffect = createEffect(setLayoutEffects);\nexport { useLayoutEffect };\n","import { hook, Hook } from './hook';\nconst useState = hook(class extends Hook {\n    constructor(id, state, initialValue) {\n        super(id, state);\n        this.updater = this.updater.bind(this);\n        if (typeof initialValue === 'function') {\n            initialValue = initialValue();\n        }\n        this.makeArgs(initialValue);\n    }\n    update() {\n        return this.args;\n    }\n    updater(value) {\n        if (typeof value === 'function') {\n            const updaterFn = value;\n            const [previousValue] = this.args;\n            value = updaterFn(previousValue);\n        }\n        this.makeArgs(value);\n        this.state.update();\n    }\n    makeArgs(value) {\n        this.args = Object.freeze([value, this.updater]);\n    }\n});\nexport { useState };\n","import { hook, Hook } from './hook';\nconst useReducer = hook(class extends Hook {\n    constructor(id, state, _, initialState, init) {\n        super(id, state);\n        this.dispatch = this.dispatch.bind(this);\n        this.currentState = init !== undefined ? init(initialState) : initialState;\n    }\n    update(reducer) {\n        this.reducer = reducer;\n        return [this.currentState, this.dispatch];\n    }\n    dispatch(action) {\n        this.currentState = this.reducer(this.currentState, action);\n        this.state.update();\n    }\n});\nexport { useReducer };\n","import { directive } from 'lit-html';\nimport { BaseScheduler } from './scheduler';\nconst includes = Array.prototype.includes;\nfunction makeVirtual() {\n    const partToScheduler = new WeakMap();\n    const schedulerToPart = new WeakMap();\n    class Scheduler extends BaseScheduler {\n        constructor(renderer, part) {\n            super(renderer, part);\n            this.state.virtual = true;\n        }\n        render() {\n            return this.state.run(() => this.renderer.apply(this.host, this.args));\n        }\n        commit(result) {\n            this.host.setValue(result);\n            this.host.commit();\n        }\n        teardown() {\n            super.teardown();\n            let part = schedulerToPart.get(this);\n            partToScheduler.delete(part);\n        }\n    }\n    function virtual(renderer) {\n        function factory(...args) {\n            return (part) => {\n                let cont = partToScheduler.get(part);\n                if (!cont) {\n                    cont = new Scheduler(renderer, part);\n                    partToScheduler.set(part, cont);\n                    schedulerToPart.set(cont, part);\n                    teardownOnRemove(cont, part);\n                }\n                cont.args = args;\n                cont.update();\n            };\n        }\n        return directive(factory);\n    }\n    return virtual;\n}\nfunction teardownOnRemove(cont, part, node = part.startNode) {\n    let frag = node.parentNode;\n    let mo = new MutationObserver(mutations => {\n        for (let mutation of mutations) {\n            if (includes.call(mutation.removedNodes, node)) {\n                mo.disconnect();\n                if (node.parentNode instanceof ShadowRoot) {\n                    teardownOnRemove(cont, part);\n                }\n                else {\n                    cont.teardown();\n                }\n                break;\n            }\n            else if (includes.call(mutation.addedNodes, node.nextSibling)) {\n                mo.disconnect();\n                teardownOnRemove(cont, part, node.nextSibling || undefined);\n                break;\n            }\n        }\n    });\n    mo.observe(frag, { childList: true });\n}\nexport { makeVirtual };\n","import { html, render } from 'lit-html';\nimport haunted from './core';\nimport { makeVirtual } from './virtual';\nconst { component, createContext } = haunted({ render });\nconst virtual = makeVirtual();\nexport { component, createContext, virtual, html, render };\n","import { makeComponent } from './component';\nimport { makeContext } from './create-context';\nfunction haunted({ render }) {\n    const component = makeComponent(render);\n    const createContext = makeContext(component);\n    return { component, createContext };\n}\nexport { haunted as default };\nexport { useCallback } from './use-callback';\nexport { useEffect } from './use-effect';\nexport { useLayoutEffect } from './use-layout-effect';\nexport { useState } from './use-state';\nexport { useReducer } from './use-reducer';\nexport { useMemo } from './use-memo';\nexport { useContext } from './use-context';\nexport { useRef } from './use-ref';\nexport { hook, Hook } from './hook';\nexport { BaseScheduler } from './scheduler';\nexport { State } from './state';\n","import { contextEvent } from './symbols';\nimport { useContext } from './use-context';\nfunction makeContext(component) {\n    return (defaultValue) => {\n        const Context = {\n            Provider: class extends HTMLElement {\n                constructor() {\n                    super();\n                    this.listeners = new Set();\n                    this.addEventListener(contextEvent, this);\n                }\n                disconnectedCallback() {\n                    this.removeEventListener(contextEvent, this);\n                }\n                handleEvent(event) {\n                    const { detail } = event;\n                    if (detail.Context === Context) {\n                        detail.value = this.value;\n                        detail.unsubscribe = this.unsubscribe.bind(this, detail.callback);\n                        this.listeners.add(detail.callback);\n                        event.stopPropagation();\n                    }\n                }\n                unsubscribe(callback) {\n                    this.listeners.delete(callback);\n                }\n                set value(value) {\n                    this._value = value;\n                    for (let callback of this.listeners) {\n                        callback(value);\n                    }\n                }\n                get value() {\n                    return this._value;\n                }\n            },\n            Consumer: component(function ({ render }) {\n                const context = useContext(Context);\n                return render(context);\n            }),\n            defaultValue,\n        };\n        return Context;\n    };\n}\nexport { makeContext };\n","import { useState } from 'haunted';\n\nlet currentId = 0;\n\nexport default () => {\n  const [todos, setTodos] = useState([]);\n\n  return {\n    addTodo(title) {\n      currentId++;\n\n      setTodos([].concat(todos, { id: currentId, title, completed: false }));\n    },\n\n    editTodo(id, newTitle) {\n      setTodos(todos.map(todo => (todo.id === id ? { ...todo, title: newTitle } : todo)));\n    },\n\n    removeTodo(id) {\n      setTodos(todos.filter(todo => todo.id !== id));\n    },\n\n    all() {\n      return [...todos];\n    },\n\n    toggleAll(checked = true) {\n      setTodos(todos.map(todo => ({ ...todo, completed: checked })));\n    },\n\n    toggle(id) {\n      setTodos(todos.map(todo => (todo.id === id ? { ...todo, completed: !todo.completed } : todo)));\n    },\n  };\n};\n","import { html } from 'lit-html';\nimport { component, useState } from 'haunted';\n\nimport useTodoModel from '../model/todoModel';\n\nconst ALL_TODOS = 'all';\nconst ACTIVE_TODOS = 'active';\nconst COMPLETED_TODOS = 'completed';\n\nfunction App() {\n  const [nowShowing, setNowShowing] = useState(ALL_TODOS);\n  const model = useTodoModel();\n\n  const handleShow = event => {\n    setNowShowing(event.detail.label);\n  };\n\n  const handleNewTodoKeyDown = event => {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault();\n\n    const val = event.target.value.trim();\n\n    if (val) {\n      model.addTodo(val);\n      event.target.value = '';\n    }\n  };\n\n  const todos = model.all();\n  const shownTodos = todos.filter(todo => {\n    switch (nowShowing) {\n      case ACTIVE_TODOS:\n        return !todo.completed;\n      case COMPLETED_TODOS:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  const activeTodoCount = todos.reduce((accum, todo) => (todo.completed ? accum : accum + 1), 0);\n\n  const completedCount = todos.length - activeTodoCount;\n\n  return html`\n    <div>\n      <header class=\"header\">\n        <h1>todos</h1>\n        <input class=\"new-todo\" placeholder=\"What needs to be done?\" @keydown=${handleNewTodoKeyDown} autofocus />\n      </header>\n      ${todos.length\n        ? html`\n            <section class=\"main\">\n              <input\n                id=\"toggle-all\"\n                class=\"toggle-all\"\n                type=\"checkbox\"\n                @change=${() => model.toggleAll(activeTodoCount !== 0)}\n                ?checked=\"${activeTodoCount === 0}\"\n              />\n              <label for=\"toggle-all\"></label>\n              <ul class=\"todo-list\">\n                ${shownTodos.map(todo => html`<todo-item .todo=${todo} .model=${model} />`)}\n              </ul>\n            </section>\n          `\n        : null}\n      ${activeTodoCount || completedCount\n        ? html`\n            <todo-footer\n              .count=${activeTodoCount}\n              .completedCount=${completedCount}\n              .nowShowing=${nowShowing}\n              @show=${handleShow}\n              @clear=${() => model.toggleAll(false)}\n            />\n          `\n        : null}\n    </div>\n  `;\n}\n\nwindow.customElements.define('todo-app', component(App, { useShadowDOM: false }));\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import { html } from 'lit-html';\nimport { component } from 'haunted';\nimport classNames from 'classnames';\n\nconst ALL_TODOS = 'all';\nconst ACTIVE_TODOS = 'active';\nconst COMPLETED_TODOS = 'completed';\n\nfunction Footer({ count, completedCount, nowShowing }) {\n  console.log(this);\n  const activeTodoWord = count > 0 ? 'items' : 'item';\n\n  const handleClear = () => {\n    this.dispatchEvent(new window.CustomEvent('clear', { bubbles: true, composed: true }));\n  };\n\n  const handleShowing = showLabel => {\n    this.dispatchEvent(new window.CustomEvent('show', { detail: { label: showLabel }, bubbles: true, composed: true }));\n  };\n\n  let clearButton = null;\n  if (completedCount > 0) {\n    clearButton = html`\n      <button class=\"clear-completed\" @click=${handleClear}>\n        Clear completed\n      </button>\n    `;\n  }\n\n  return html`\n    <footer class=\"footer\">\n      <span class=\"todo-count\"> <strong>${count}</strong> ${activeTodoWord} left </span>\n      <ul class=\"filters\">\n        <li>\n          <a @click=${() => handleShowing(ALL_TODOS)} class=${classNames({ selected: nowShowing === ALL_TODOS })}>\n            All\n          </a>\n        </li>\n        &nbsp\n        <li>\n          <a @click=${() => handleShowing(ACTIVE_TODOS)} class=${classNames({ selected: nowShowing === ACTIVE_TODOS })}>\n            Active\n          </a>\n        </li>\n        &nbsp\n        <li>\n          <a\n            @click=${() => handleShowing(COMPLETED_TODOS)}\n            class=${classNames({ selected: nowShowing === COMPLETED_TODOS })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      ${clearButton}\n    </footer>\n  `;\n}\n\nFooter.observedAttributes = ['count', 'completedCount', 'nowShowing'];\n\nwindow.customElements.define('todo-footer', component(Footer, { useShadowDOM: false }));\n",null,"import { html } from 'lit-html';\nimport { component, useState } from 'haunted';\nimport classNames from 'classnames';\n\nfunction TodoItem({ todo, model }) {\n  const [isEditing, setIsEditing] = useState(false);\n\n  const handleSubmit = event => {\n    const val = event.target.value.trim();\n\n    if (val) {\n      model.editTodo(todo.id, val);\n      event.target.value = '';\n      setIsEditing(false);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault();\n    handleSubmit(event);\n  };\n\n  return html`\n    <li\n      class=${classNames({\n        completed: todo.completed,\n        editing: isEditing,\n      })}\n    >\n      <div class=\"view\">\n        <input class=\"toggle\" type=\"checkbox\" ?checked=${todo.completed} @change=${() => model.toggle(todo.id)} />\n        <label @dblclick=${() => setIsEditing(true)}>\n          ${todo.title}\n        </label>\n        <button class=\"destroy\" @click=${() => model.removeTodo(todo.id)} />\n      </div>\n      <input class=\"edit\" @blur=${handleSubmit} @keydown=${handleKeyDown} />\n    </li>\n  `;\n}\n\nTodoItem.observedAttributes = ['todo', 'model'];\n\nwindow.customElements.define('todo-item', component(TodoItem, { useShadowDOM: false }));\n"]}