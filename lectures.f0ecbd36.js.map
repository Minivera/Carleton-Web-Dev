{"mappings":"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","sources":["/home/runner/work/carleton-web-dev/carleton-web-dev/node_modules/@parcel/scope-hoisting/lib/prelude.js","src/wc-course-website/components/lecture/index.js"],"names":["$parcel$modules","$parcel$bundles","globalObject","globalThis","self","window","global","parcelRequire","name","module","require","err","Error","code","register","id","exports","registerBundle","fn","Lecture","HTMLDivElement","_this","$f09ff9c85a1a155fe0c1bcd4dcd9361e$var$_classCallCheck","this","_super","call","lectureTemplateId","unsuscriber","render","isConnected","$b2736226bbcf175e104b7e710aa92180$init","databaseManager","subscribe","bind","oldValue","newValue","ready","classList","add","lectureId","query","URL","location","toString","hasAttribute","getAttribute","searchParams","has","get","lecture","getLecture","lectureNode","document","querySelector","content","cloneNode","title","href","concat","$loki","innerText","unit","deletePath","onclick","deleteLecture","slidesTemplate","recordings","slides","forEach","slide","node","appendChild","createTextNode","recordingsTemplate","recording","codeTemplate","innerHTML","customElements","define","extends"],"version":3,"file":"lectures.f0ecbd36.js.map","sourcesContent":[null,"import { databaseManager } from '../../database';\n\nclass Lecture extends window.HTMLDivElement {\n  constructor() {\n    super();\n\n    this.lectureTemplateId = '#single-lecture';\n\n    this.unsuscriber = null;\n    this.render();\n  }\n\n  connectedCallback() {\n    if (this.isConnected) {\n      this.unsuscriber = databaseManager.subscribe(this.render.bind(this));\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.unsuscriber) {\n      this.unsuscriber();\n    }\n  }\n\n  static get observedAttributes() {\n    return ['lecture-id'];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'lecture-id' && oldValue !== newValue) {\n      this.render();\n    }\n  }\n\n  render() {\n    if (!databaseManager.ready) {\n      return;\n    }\n\n    this.classList.add('panel');\n    this.classList.add('is-primary');\n\n    let lectureId = null;\n    const query = new window.URL(window.location.toString());\n    if (this.hasAttribute('lecture-id')) {\n      lectureId = this.getAttribute('lecture-id');\n    } else if (query.searchParams.has('lecture')) {\n      lectureId = query.searchParams.get('lecture');\n    } else {\n      return;\n    }\n\n    const lecture = databaseManager.getLecture(lectureId);\n    if (!lecture) {\n      return;\n    }\n\n    const lectureTemplate = document.querySelector(this.lectureTemplateId).content;\n    const lectureNode = lectureTemplate.cloneNode(true);\n\n    const title = lectureNode.querySelector('[data-element=\"title-link\"]');\n    title.href = `/wc-course-website/lecture/index.html?lecture=${lecture.$loki}`;\n    title.innerText = lecture.unit;\n\n    const deletePath = this.getAttribute('delete-path');\n    const deleteButton = lectureNode.querySelector('[data-element=\"delete-button\"]');\n    deleteButton.onclick = () => {\n      databaseManager.deleteLecture(lecture);\n      if (deletePath) {\n        window.location.href = deletePath;\n      }\n    };\n\n    const slidesTemplate = lectureNode.querySelector('[data-list=\"slides\"]').content;\n    if (lecture.recordings) {\n      lecture.slides.forEach(slide => {\n        const node = slidesTemplate.cloneNode(true);\n        const container = node.querySelector('div');\n        container.appendChild(document.createTextNode(slide.title));\n        lectureNode.appendChild(node);\n      });\n    }\n\n    const recordingsTemplate = lectureNode.querySelector('[data-list=\"recordings\"]').content;\n    if (lecture.recordings) {\n      lecture.recordings.forEach(recording => {\n        const node = recordingsTemplate.cloneNode(true);\n        const container = node.querySelector('div');\n        container.appendChild(document.createTextNode(recording.title));\n        lectureNode.appendChild(node);\n      });\n    }\n\n    const codeTemplate = lectureNode.querySelector('[data-list=\"code\"]').content;\n    if (lecture.code) {\n      lecture.code.forEach(code => {\n        const node = codeTemplate.cloneNode(true);\n        const container = node.querySelector('div');\n        container.appendChild(document.createTextNode(code.title));\n        lectureNode.appendChild(node);\n      });\n    }\n\n    this.innerHTML = '';\n    this.appendChild(lectureNode);\n  }\n}\n\nwindow.customElements.define('single-lecture', Lecture, { extends: 'div' });\n"]}