{"mappings":"gOAAIA,EAAkB,GAClBC,EAAkB,GAElBC,EACoB,oBAAfC,WACHA,WACgB,oBAATC,KACPA,KACkB,oBAAXC,OACPA,OACkB,oBAAXC,OACPA,OACA,0yCAE4B,MAA9BJ,EAAaK,gBACfL,EAAaK,cAAgB,SAASC,GAOpC,GALIA,KAAQP,IACVA,EAAgBO,YACTP,EAAgBO,IAGrBA,KAAQR,EACV,OAAOA,EAAgBQ,GAKzB,GAAsB,oBAAXC,QAAoD,mBAAnBA,OAAOC,QACjD,OAAOD,OAAOC,QAAQF,GAGxB,IAAIG,EAAM,IAAIC,MAAM,uBAAyBJ,EAAO,KAEpD,MADAG,EAAIE,KAAO,mBACLF,GAGRT,EAAaK,cAAcO,SAAW,SAAkBC,EAAIC,GAC1DhB,EAAgBe,GAAMC,GAGxBd,EAAaK,cAAcU,eAAiB,SAAwBF,EAAIG,GACtEjB,EAAgBc,GAAMG,EACtBlB,EAAgBe,GAAM,SChCpBI,8WAEFC,KAAKC,0CAIL,IAAIC,EAAO,KACLC,EAAOH,KAAKI,aAAa,UAC/B,OAAQD,GACN,IAAK,WACHD,EAAOG,SAASC,eAAeC,IAAAC,gBAAgBC,cAAcC,QAC7D,MAEF,IAAK,YACHR,EAAOG,SAASC,eAAeC,IAAAC,gBAAgBG,eAAeD,QAC9D,MAEF,IAAK,cACHR,EAAOG,SAASC,eAAeC,IAAAC,gBAAgBI,iBAAiBF,QAChE,MAEF,IAAK,SACHR,EAAOG,SAASC,eACdC,IAAAC,gBAAgBK,YAAYC,QAAO,SAACC,EAAaC,GAAd,OAAwBD,EAAcC,EAAMC,OAAOP,SAAQ,IAEhG,MAEF,QACE,MAAM,IAAIlB,MAAJ,+BAAA0B,OAAyCf,IAGnDH,KAAKmB,UAAY,GACjBnB,KAAKoB,YAAYlB,sCAhCMmB,IAAAC,iBAAiBrC,OAAOsC,8/CAoCnDtC,OAAOuC,eAAeC,OAAO,gBAAiB1B,OCrCjC2B,wQACX,SAAAA,IAAc,mGAAAC,CAAA3B,KAAA0B,GAAAE,EAAAC,KAAA7B,KACN,wBAAwB,iDAI9B8B,EAAAC,EAAAL,EAAAM,WAAA,SAAAhC,MAAA6B,KAAA7B,MAEkBA,KAAKiC,cAAc,0BAC3BC,UAAYlC,KAAKI,aAAa,6DAI5CnB,OAAOuC,eAAeC,OAAO,sBAAuBC,ytCCbvCS,wQACX,SAAAA,IAAc,IAAAC,EAAA,mGAAAC,CAAArC,KAAAmC,IACZC,EAAAR,EAAAC,KAAA7B,OAEKsC,iBAAmB,eAHZF,kDAOZpC,KAAKC,0CAIL,IAAMsC,EAAShC,IAAAC,gBAAgBK,YAGzB2B,EADiBnC,SAAS4B,cAAcjC,KAAKsC,kBAAkBG,QACnCC,WAAU,GACtCC,EAAYH,EAAWP,cAAc,2BACrCW,EAAsBJ,EAAWP,cAAc,iCAAiCQ,QAEtFF,EAAOM,SAAQ,SAAA7B,GACb,IAAMd,EAAO0C,EAAoBF,WAAU,GACrCI,EAAQ5C,EAAK+B,cAAc,0BACjCa,EAAMC,KAAOC,IAAAC,UAAU,QAASjC,EAAMkC,OACtCJ,EAAMZ,UAAN,GAAAhB,OAAqBF,EAAM8B,MAA3B,OAAA5B,OAAsCF,EAAMC,OAAOP,OAAnD,WACAiC,EAAUvB,YAAYlB,MAGxBF,KAAKmB,UAAY,GACjBnB,KAAKoB,YAAYoB,sCA5BOnB,IAAAC,iBAAiBrC,OAAOsC,yBAgCpDtC,OAAOuC,eAAeC,OAAO,cAAeU","sources":["/home/runner/work/carleton-web-dev/carleton-web-dev/node_modules/@parcel/scope-hoisting/lib/prelude.js","src/wc-course-website/components/contentCount.js","src/wc-course-website/components/collapsibleContent/index.js","src/wc-course-website/components/forums/index.js"],"names":["$parcel$modules","$parcel$bundles","globalObject","globalThis","self","window","global","parcelRequire","name","module","require","err","Error","code","register","id","exports","registerBundle","fn","ContentCount","this","render","node","attr","getAttribute","document","createTextNode","$b2736226bbcf175e104b7e710aa92180$init","databaseManager","getLectures","length","getTutorials","getAssignments","getForums","reduce","accumulator","forum","topics","concat","innerHTML","appendChild","$dc4bd82eadd83b135ac82ece8b7911c$init","DatabaseConsumer","HTMLElement","customElements","define","CollapsibleContent","$f14d863edacf08883710da00a67d8c5$var$_classCallCheck","_super","call","$f14d863edacf08883710da00a67d8c5$var$_get","$f14d863edacf08883710da00a67d8c5$var$_getPrototypeOf","prototype","querySelector","innerText","Forums","_this","$aa181f2dc939b4e7e5cbfdf0a8dd64a6$var$_classCallCheck","forumsTemplateId","forums","forumsNode","content","cloneNode","container","singleForumTemplate","forEach","title","href","$efb332d8ccb9a6b3f962ac63aa3525c$init","createUrl","$loki"],"version":3,"file":"wc-course-website.0f700028.js.map","sourcesContent":[null,"import { databaseManager } from '../database';\nimport { DatabaseConsumer } from './base/databaseConsumer';\n\n/**\n * Component that will render the number of elements of a specific type in the database.\n *\n * @attr {lectures|tutorials|assignments|forums} source - What element to count from the database. Will trigger\n * an error if the source is not one of the valid values.\n *\n * @element content-count\n */\nclass ContentCount extends DatabaseConsumer(window.HTMLElement) {\n  notified() {\n    this.render();\n  }\n\n  render() {\n    let node = null;\n    const attr = this.getAttribute('source');\n    switch (attr) {\n      case 'lectures': {\n        node = document.createTextNode(databaseManager.getLectures().length);\n        break;\n      }\n      case 'tutorials': {\n        node = document.createTextNode(databaseManager.getTutorials().length);\n        break;\n      }\n      case 'assignments': {\n        node = document.createTextNode(databaseManager.getAssignments().length);\n        break;\n      }\n      case 'forums': {\n        node = document.createTextNode(\n          databaseManager.getForums().reduce((accumulator, forum) => accumulator + forum.topics.length, 0)\n        );\n        break;\n      }\n      default:\n        throw new Error(`Unknown course content type ${attr}`);\n    }\n\n    this.innerHTML = '';\n    this.appendChild(node);\n  }\n}\n\nwindow.customElements.define('content-count', ContentCount);\n","import { Collapsible } from '../base/collapsible';\n\n/**\n * Collapsible content that renders its content with the ability to click a chevron icon\n * to collapse or expand it. Expanded by default.\n *\n * @attr {String} title - title to display next to the icon and above the content.\n *\n * @element collapsible-content\n */\nexport class CollapsibleContent extends Collapsible {\n  constructor() {\n    super('#collapsible-content', true);\n  }\n\n  render() {\n    super.render();\n\n    const titleNode = this.querySelector('[data-element=\"title\"]');\n    titleNode.innerText = this.getAttribute('title');\n  }\n}\n\nwindow.customElements.define('collapsible-content', CollapsibleContent);\n","import { databaseManager } from '../../database';\nimport { DatabaseConsumer } from '../base/databaseConsumer';\nimport { createUrl } from '../../utilities/createUrl';\n\n/**\n * List of forums from the database. Will render all forums without any filtering or sorting. Only renders the forums\n * titles and their topic counts, and will ignore the topics.\n *\n * @element forums-list\n */\nexport class Forums extends DatabaseConsumer(window.HTMLElement) {\n  constructor() {\n    super();\n\n    this.forumsTemplateId = '#forums-list';\n  }\n\n  notified() {\n    this.render();\n  }\n\n  render() {\n    const forums = databaseManager.getForums();\n\n    const forumsTemplate = document.querySelector(this.forumsTemplateId).content;\n    const forumsNode = forumsTemplate.cloneNode(true);\n    const container = forumsNode.querySelector('[data-element=\"forums\"]');\n    const singleForumTemplate = forumsNode.querySelector('[data-element=\"single-forum\"]').content;\n\n    forums.forEach(forum => {\n      const node = singleForumTemplate.cloneNode(true);\n      const title = node.querySelector('[data-element=\"title\"]');\n      title.href = createUrl('forum', forum.$loki);\n      title.innerText = `${forum.title} - ${forum.topics.length} topics`;\n      container.appendChild(node);\n    });\n\n    this.innerHTML = '';\n    this.appendChild(forumsNode);\n  }\n}\n\nwindow.customElements.define('forums-list', Forums);\n"]}