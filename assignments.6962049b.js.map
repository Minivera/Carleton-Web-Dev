{"mappings":"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","sources":["/home/runner/work/carleton-web-dev/carleton-web-dev/node_modules/@parcel/scope-hoisting/lib/prelude.js","src/wc-course-website/components/assignment/index.js","src/wc-course-website/components/assignments/index.js"],"names":["$parcel$modules","$parcel$bundles","globalObject","globalThis","self","window","global","parcelRequire","name","module","require","err","Error","code","register","id","exports","registerBundle","fn","Assignment","_this","$bdfa298c7645d53f818059b1880c5b4$var$_classCallCheck","this","_super","call","assignmentTemplateId","assignmentData","render","classList","add","assignment","query","URL","location","toString","searchParams","has","assignmentId","get","$b2736226bbcf175e104b7e710aa92180$init","databaseManager","getAssignment","assignmentNode","document","querySelector","content","cloneNode","title","href","$efb332d8ccb9a6b3f962ac63aa3525c$init","createUrl","$loki","innerText","deletePath","getAttribute","onclick","deleteAssignment","specfileTemplate","specfile","node","appendChild","createTextNode","resourcesTemplate","resources","forEach","resource","innerHTML","$dc4bd82eadd83b135ac82ece8b7911c$init","DatabaseConsumer","HTMLDivElement","customElements","define","extends","Assignments","$ea352e5af87aa16c2cc292de61e1$var$_classCallCheck","assignmentsTemplateId","assignments","getAssignments","assignmentsNode","container","$bdfa298c7645d53f818059b1880c5b4$export$Assignment","close","modal","onsubmit","event","preventDefault","target","value","tutorial","addAssignment","HTMLElement"],"version":3,"file":"assignments.6962049b.js.map","sourcesContent":[null,"import { databaseManager } from '../../database';\nimport { DatabaseConsumer } from '../base/databaseConsumer';\nimport { createUrl } from '../../utilities/createUrl';\n\n/**\n * A component that will render a single assignment's panel. Will render the assignment passed trough properties or\n * through the `assignment` search param. All events are handled internally through the database manager.\n *\n * This element extends the base div element and will need to created as `<div is=\"single-assignment\">`\n *\n * @prop {Assignment} assignment - Write only assignment property to define which assignment to render.\n *\n * @element single-assignment\n */\nexport class Assignment extends DatabaseConsumer(window.HTMLDivElement) {\n  constructor() {\n    super();\n\n    this.assignmentTemplateId = '#single-assignment';\n\n    this.assignmentData = null;\n  }\n\n  notified() {\n    this.render();\n  }\n\n  set assignment(assignment) {\n    this.assignmentData = assignment;\n    this.render();\n  }\n\n  render() {\n    this.classList.add('panel');\n    this.classList.add('is-success');\n\n    let assignment = null;\n    const query = new window.URL(window.location.toString());\n    if (this.assignmentData) {\n      assignment = this.assignmentData;\n    } else if (query.searchParams.has('assignment')) {\n      const assignmentId = query.searchParams.get('assignment');\n      assignment = databaseManager.getAssignment(assignmentId);\n    } else {\n      return;\n    }\n\n    if (!assignment) {\n      return;\n    }\n\n    const assignmentTemplate = document.querySelector(this.assignmentTemplateId).content;\n    const assignmentNode = assignmentTemplate.cloneNode(true);\n\n    const title = assignmentNode.querySelector('[data-element=\"title-link\"]');\n    title.href = createUrl('assignment', assignment.$loki);\n    title.innerText = assignment.name;\n\n    const deletePath = this.getAttribute('delete-path');\n    const deleteButton = assignmentNode.querySelector('[data-element=\"delete-button\"]');\n    deleteButton.onclick = () => {\n      databaseManager.deleteAssignment(assignment);\n      if (deletePath) {\n        window.location.href = deletePath;\n      }\n    };\n\n    const specfileTemplate = assignmentNode.querySelector('[data-list=\"specfile\"]').content;\n    if (assignment.specfile) {\n      const node = specfileTemplate.cloneNode(true);\n      const container = node.querySelector('div');\n      container.appendChild(document.createTextNode(assignment.specfile.title));\n      assignmentNode.appendChild(node);\n    }\n\n    const resourcesTemplate = assignmentNode.querySelector('[data-list=\"resources\"]').content;\n    if (assignment.resources) {\n      assignment.resources.forEach(resource => {\n        const node = resourcesTemplate.cloneNode(true);\n        const container = node.querySelector('div');\n        container.appendChild(document.createTextNode(resource.title));\n        assignmentNode.appendChild(node);\n      });\n    }\n\n    this.innerHTML = '';\n    this.appendChild(assignmentNode);\n  }\n}\n\nwindow.customElements.define('single-assignment', Assignment, { extends: 'div' });\n","import { databaseManager } from '../../database';\nimport { DatabaseConsumer } from '../base/databaseConsumer';\nimport { Assignment } from '../assignment';\nimport { createUrl } from '../../utilities/createUrl';\n\n/**\n * List of assignments from the database. Will render all assignments without any filtering or sorting.\n *\n * @element assignments-list\n */\nexport class Assignments extends DatabaseConsumer(window.HTMLElement) {\n  constructor() {\n    super();\n\n    this.assignmentsTemplateId = '#assignments-list';\n  }\n\n  notified() {\n    this.render();\n  }\n\n  render() {\n    const assignments = databaseManager.getAssignments();\n\n    const assignmentsTemplate = document.querySelector(this.assignmentsTemplateId).content;\n    const assignmentsNode = assignmentsTemplate.cloneNode(true);\n    const container = assignmentsNode.querySelector('[data-element=\"assignments\"]');\n\n    assignments.forEach(assignment => {\n      const node = new Assignment();\n      node.assignment = assignment;\n      container.appendChild(node);\n    });\n\n    const query = new window.URL(window.location.toString());\n    if (query.searchParams.has('new')) {\n      const close = () => {\n        window.location.href = createUrl('assignments');\n      };\n\n      const modal = assignmentsNode.querySelector('[data-element=\"new-modal\"]');\n      modal.classList.add('is-active');\n\n      modal.querySelector('[data-element=\"new-form\"]').onsubmit = event => {\n        event.preventDefault();\n\n        const name = event.target.querySelector('input').value;\n\n        const tutorial = databaseManager.addAssignment(name);\n        window.location.href = createUrl('assignment', tutorial.$loki);\n      };\n\n      modal.querySelector('[data-element=\"cancel-button\"]').onclick = close;\n      modal.querySelector('[data-element=\"close-button\"]').onclick = close;\n    }\n\n    this.innerHTML = '';\n    this.appendChild(assignmentsNode);\n  }\n}\n\nwindow.customElements.define('assignments-list', Assignments);\n"]}