(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{61:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var o=n(2),a=n(6),r=(n(0),n(75)),i={title:"Creating applications"},c={unversionedId:"introduction/applications",id:"introduction/applications",isDocsHomePage:!1,title:"Creating applications",description:"So far, we have seen how to create single components. Let's now explore how to use all those resources to create a",source:"@site/docs/introduction/applications.md",permalink:"/carleton-web-dev/project/docs/introduction/applications",sidebar:"docs",previous:{title:"Events, Conditionals & Loops",permalink:"/carleton-web-dev/project/docs/introduction/events-conditionals-loops"},next:{title:"Context: Introduction",permalink:"/carleton-web-dev/project/docs/context/overview"}},l=[],d={rightToc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"So far, we have seen how to create single components. Let's now explore how to use all those resources to create a\nTODO manager."),Object(r.b)("p",null,"Let's first start by creating an HTML file for our application. It can contain anything, but for the purposes of this\nguide, copy this content into it."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-html"}),'<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <title>Todo List</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="./index.jsx"><\/script>\n  </body>\n</html>\n')),Object(r.b)("p",null,"We will create our entire application using VirtualDOM and thus, we only include our script file, and an element in\nwhich we will add our application. Let's do that right now by creating the ",Object(r.b)("inlineCode",{parentName:"p"},"index.jsx")," file in the same location as\nthe html file."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"/** @jsx h */\nimport { VirtualDOM, h } from 'VirtualDOM';\n\nconst defaultTodos = [\n  'Create application',\n  'Write unit tests',\n  'Write docs'\n];\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Todo list</h1>\n      <ul>\n        {defaultTodos.map(todo => <li>{todo}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nnew VirtualDOM(App).renderInto(document.querySelector('#app'));\n")),Object(r.b)("p",null,"This will render a small list of static todos onto the screen. Let's start adding the ability to add todos to our\napplication. Go back to ",Object(r.b)("inlineCode",{parentName:"p"},"index.jsx"),"'s ",Object(r.b)("inlineCode",{parentName:"p"},"App")," component and change it to the following code."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"/** @jsx h */\nimport { VirtualDOM, h } from 'VirtualDOM';\n\nconst defaultTodos = [\n  'Create application',\n  'Write unit tests',\n  'Write docs'\n];\n\nconst App = (_, { todos = defaultTodo, setState }) => {\n  const addTodo = value => setState('todos', [...todos, value]);\n\n  return (\n    <div>\n      <h1>Todo list</h1>\n      <ul>\n        {todos.map(todo => <li>{todo}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nnew VirtualDOM(App).renderInto(document.querySelector('#app'));\n")),Object(r.b)("p",null,"We added a second parameter for the component's context to access the ",Object(r.b)("inlineCode",{parentName:"p"},"todos")," property, with our previous todos as\nthe default value, and the ",Object(r.b)("inlineCode",{parentName:"p"},"setState")," method to update the state when necessary. We then create a function that will\nadd the given function when we want to add a new todo. However, we still need a component for adding said todo, let\n's do that right now."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const AddTodo = ({ addTodo }, { newTodo = '', setState }) => {\n  return (\n    <div>\n        <input type=\"text\" value={newTodo} oninput={event => setState('newTodo', event.target.value)} />\n        <button onclick={() => addTodo(newTodo)}>Create</button>\n    </div>\n  );\n};\n")),Object(r.b)("p",null,"This component will render an input and manage its state for the new todo value, only calling the ",Object(r.b)("inlineCode",{parentName:"p"},"addTodo")," when the\nbutton is clicked, passing along the value of ",Object(r.b)("inlineCode",{parentName:"p"},"newTodo"),". Component in VirtualDOM are completely isolated from one\nanother and in complex applications, this means that updating the state of ",Object(r.b)("inlineCode",{parentName:"p"},"AddTodo")," would not cause any updates on its\nparents."),Object(r.b)("p",null,"We can add this new component to the structure of our previous component and have a todo list with the capacity to\nadd new todos."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const App = (_, { todos = defaultTodo, setState }) => {\n  const addTodo = value => setState('todos', [...todos, value]);\n\n  return (\n    <div>\n      <h1>Todo list</h1>\n      <ul>\n        {todos.map(todo => <li>{todo}</li>)}\n      </ul>\n      <AddTodo addTodo={addTodo} />\n    </div>\n  );\n};\n")),Object(r.b)("p",null,"With that, we have an application. While it is a simple one, we can see how these patterns can be expanded to build\nanything our hearts desire. In the next section, you will see how these familiar patterns can be expanded with the\nuse of the component context."))}s.isMDXComponent=!0},75:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),s=function(e){var t=a.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return a.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),b=o,h=p["".concat(i,".").concat(b)]||p[b]||u[b]||r;return n?a.a.createElement(h,c(c({ref:t},d),{},{components:n})):a.a.createElement(h,c({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var d=2;d<r;d++)i[d]=n[d];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);