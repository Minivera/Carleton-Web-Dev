{"mappings":"yJAcA,MAAMA,UAAoBC,IAAAC,iBAAiBC,OAAOC,cAChDC,WACEC,KAAKC,SAGPC,MAAMC,GACJ,MAAMC,EAAQ,IAAIP,OAAOQ,IAAIR,OAAOS,SAASC,YAC7C,OAAIP,KAAKQ,aAAa,cACbR,KAAKS,aAAa,cAChBL,EAAMM,aAAaC,IAAIR,GACzBS,SAASR,EAAMM,aAAaG,IAAIV,KAEjC,EAGVF,SACE,IAAIa,EAAO,KACX,MAAMC,EAAOf,KAAKS,aAAa,UAC/B,OAAQM,GACN,IAAK,WACHD,EAAOE,IAAAC,gBAAgBC,WAAWlB,KAAKE,MAAM,YAAYiB,KACzD,MAEF,IAAK,YACHL,EAAOE,IAAAC,gBAAgBG,YAAYpB,KAAKE,MAAM,aAAamB,KAC3D,MAEF,IAAK,cACHP,EAAOE,IAAAC,gBAAgBK,cAActB,KAAKE,MAAM,eAAemB,KAC/D,MAEF,IAAK,SACHP,EAAOE,IAAAC,gBAAgBM,SAASvB,KAAKE,MAAM,UAAUsB,MACrD,MAEF,IAAK,SACHV,EAAOE,IAAAC,gBAAgBQ,cAAczB,KAAKE,MAAM,UAAUsB,MAC1D,MAEF,QACE,MAAM,IAAIE,MAAJ,+BAAAC,OAAyCZ,IAGnDf,KAAK4B,UAAYd,GAIrBjB,OAAOgC,eAAeC,OAAO,eAAgBpC","sources":["src/wc-course-website/components/contentName.js"],"names":["ContentName","$d7f3e883460968146cf987de83434c3$init","DatabaseConsumer","window","HTMLElement","notified","this","render","getId","source","query","URL","location","toString","hasAttribute","getAttribute","searchParams","has","parseInt","get","text","attr","$bf50779a85efbaabc121d74c5253077$init","databaseManager","getLecture","unit","getTutorial","name","getAssignment","getForum","title","getForumTopic","Error","concat","innerText","customElements","define"],"version":3,"file":"lecture.f08c0cf9.js.map","sourcesContent":["import { databaseManager } from '../database';\nimport { DatabaseConsumer } from './base/databaseConsumer';\n\n/**\n * Component that will render the name of a specific element of a specific type in the database. Will find the\n * element using the attribute `element-id` or with a search param equal to the source attribute.\n *\n * @attr {lectures|tutorials|assignments|forums|topics} source - What element to source from the database. Will trigger\n * an error if the source is not one of the valid values.\n *\n * @attr {String} element-id - Id of the element to render the name for.\n *\n * @element content-name\n */\nclass ContentName extends DatabaseConsumer(window.HTMLElement) {\n  notified() {\n    this.render();\n  }\n\n  getId(source) {\n    const query = new window.URL(window.location.toString());\n    if (this.hasAttribute('element-id')) {\n      return this.getAttribute('element-id');\n    } else if (query.searchParams.has(source)) {\n      return parseInt(query.searchParams.get(source));\n    }\n    return -1;\n  }\n\n  render() {\n    let text = null;\n    const attr = this.getAttribute('source');\n    switch (attr) {\n      case 'lectures': {\n        text = databaseManager.getLecture(this.getId('lecture')).unit;\n        break;\n      }\n      case 'tutorials': {\n        text = databaseManager.getTutorial(this.getId('tutorial')).name;\n        break;\n      }\n      case 'assignments': {\n        text = databaseManager.getAssignment(this.getId('assignment')).name;\n        break;\n      }\n      case 'forums': {\n        text = databaseManager.getForum(this.getId('forum')).title;\n        break;\n      }\n      case 'topics': {\n        text = databaseManager.getForumTopic(this.getId('topic')).title;\n        break;\n      }\n      default:\n        throw new Error(`Unknown course content type ${attr}`);\n    }\n\n    this.innerText = text;\n  }\n}\n\nwindow.customElements.define('content-name', ContentName);\n"]}