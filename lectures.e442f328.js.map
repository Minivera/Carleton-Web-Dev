{"mappings":"gWAUO,MAAMA,UAANC,IAAAC,YACLC,cACEC,MAAM,wBAAwB,GAGhCC,SACED,MAAMC,SAEYC,KAAKC,cAAc,0BAC3BC,UAAYF,KAAKG,aAAa,UAI5CC,OAAOC,eAAeC,OAAO,sBAAuBZ,GCb7C,MAAMa,UAAiBC,IAAAC,iBAAiBL,OAAOM,cACpDb,cACEC,QAEAE,KAAKW,mBAAqB,iBAG5BC,WACEZ,KAAKD,SAGPA,SACE,MAAMc,EAAWC,IAAAC,gBAAgBC,cAG3BC,EADmBC,SAASjB,cAAcD,KAAKW,oBAAoBQ,QACnCC,WAAU,GAC1CC,EAAYJ,EAAahB,cAAc,6BAS7C,GAPAY,EAASS,QAAQC,IACf,MAAMC,EAAO,IAAAC,IAAA,SACbD,EAAKD,QAAUA,EACfF,EAAUK,YAAYF,KAGV,IAAIpB,OAAOuB,IAAIvB,OAAOwB,SAASC,YACnCC,aAAaC,IAAI,OAAQ,CACjC,MAAMC,EAAQ,KACZ5B,OAAOwB,SAASK,KAAOC,IAAAC,UAAU,aAG7BC,EAAQnB,EAAahB,cAAc,8BACzCmC,EAAMC,UAAUC,IAAI,aAEpBF,EAAMnC,cAAc,6BAA6BsC,SAAWC,IAC1DA,EAAMC,iBAEN,MAAMC,EAAOF,EAAMG,OAAO1C,cAAc,SAAS2C,MAE3CrB,EAAUT,IAAAC,gBAAgB8B,WAAWH,GAC3CtC,OAAOwB,SAASK,KAAOC,IAAAC,UAAU,UAAWZ,EAAQuB,QAGtDV,EAAMnC,cAAc,kCAAkC8C,QAAUf,EAChEI,EAAMnC,cAAc,iCAAiC8C,QAAUf,EAGjEhC,KAAKgD,UAAY,GACjBhD,KAAK0B,YAAYT,IAIrBb,OAAOC,eAAeC,OAAO,gBAAiBC","sources":["src/wc-course-website/components/collapsibleContent/index.js","src/wc-course-website/components/lectures/index.js"],"names":["CollapsibleContent","$e5f55b2e41da3fb2956aa19b001706b$init","Collapsible","constructor","super","render","this","querySelector","innerText","getAttribute","window","customElements","define","Lectures","$d7f3e883460968146cf987de83434c3$init","DatabaseConsumer","HTMLElement","lecturesTemplateId","notified","lectures","$bf50779a85efbaabc121d74c5253077$init","databaseManager","getLectures","lecturesNode","document","content","cloneNode","container","forEach","lecture","node","$c3aae675162b2de6e5167b700184678$init","appendChild","URL","location","toString","searchParams","has","close","href","$b16775c2d96d9b6bd584730e846d3822$init","createUrl","modal","classList","add","onsubmit","event","preventDefault","name","target","value","addLecture","$loki","onclick","innerHTML"],"version":3,"file":"lectures.e442f328.js.map","sourcesContent":["import { Collapsible } from '../base/collapsible';\n\n/**\n * Collapsible content that renders its content with the ability to click a chevron icon\n * to collapse or expand it. Expanded by default.\n *\n * @attr {String} title - title to display next to the icon and above the content.\n *\n * @element collapsible-content\n */\nexport class CollapsibleContent extends Collapsible {\n  constructor() {\n    super('#collapsible-content', true);\n  }\n\n  render() {\n    super.render();\n\n    const titleNode = this.querySelector('[data-element=\"title\"]');\n    titleNode.innerText = this.getAttribute('title');\n  }\n}\n\nwindow.customElements.define('collapsible-content', CollapsibleContent);\n","import { databaseManager } from '../../database';\nimport { DatabaseConsumer } from '../base/databaseConsumer';\nimport { Lecture } from '../lecture';\nimport { createUrl } from '../../utilities/createUrl';\n\n/**\n * List of lectures from the database. Will render all lectures without any filtering or sorting.\n *\n * @element lectures-list\n */\nexport class Lectures extends DatabaseConsumer(window.HTMLElement) {\n  constructor() {\n    super();\n\n    this.lecturesTemplateId = '#lectures-list';\n  }\n\n  notified() {\n    this.render();\n  }\n\n  render() {\n    const lectures = databaseManager.getLectures();\n\n    const lecturesTemplate = document.querySelector(this.lecturesTemplateId).content;\n    const lecturesNode = lecturesTemplate.cloneNode(true);\n    const container = lecturesNode.querySelector('[data-element=\"lectures\"]');\n\n    lectures.forEach(lecture => {\n      const node = new Lecture();\n      node.lecture = lecture;\n      container.appendChild(node);\n    });\n\n    const query = new window.URL(window.location.toString());\n    if (query.searchParams.has('new')) {\n      const close = () => {\n        window.location.href = createUrl('lectures');\n      };\n\n      const modal = lecturesNode.querySelector('[data-element=\"new-modal\"]');\n      modal.classList.add('is-active');\n\n      modal.querySelector('[data-element=\"new-form\"]').onsubmit = event => {\n        event.preventDefault();\n\n        const name = event.target.querySelector('input').value;\n\n        const lecture = databaseManager.addLecture(name);\n        window.location.href = createUrl('lecture', lecture.$loki);\n      };\n\n      modal.querySelector('[data-element=\"cancel-button\"]').onclick = close;\n      modal.querySelector('[data-element=\"close-button\"]').onclick = close;\n    }\n\n    this.innerHTML = '';\n    this.appendChild(lecturesNode);\n  }\n}\n\nwindow.customElements.define('lectures-list', Lectures);\n"]}