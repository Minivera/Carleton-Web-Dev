{"mappings":"oEAAIA,EAAkB,GAClBC,EAAkB,GAElBC,EACoB,oBAAfC,WACHA,WACgB,oBAATC,KACPA,KACkB,oBAAXC,OACPA,OACkB,oBAAXC,OACPA,OACA,4sCAE4B,MAA9BJ,EAAaK,gBACfL,EAAaK,cAAgB,SAASC,GAOpC,GALIA,KAAQP,IACVA,EAAgBO,YACTP,EAAgBO,IAGrBA,KAAQR,EACV,OAAOA,EAAgBQ,GAKzB,GAAsB,oBAAXC,QAAoD,mBAAnBA,OAAOC,QACjD,OAAOD,OAAOC,QAAQF,GAGxB,IAAIG,EAAM,IAAIC,MAAM,uBAAyBJ,EAAO,KAEpD,MADAG,EAAIE,KAAO,mBACLF,GAGRT,EAAaK,cAAcO,SAAW,SAAkBC,EAAIC,GAC1DhB,EAAgBe,GAAMC,GAGxBd,EAAaK,cAAcU,eAAiB,SAAwBF,EAAIG,GACtEjB,EAAgBc,GAAMG,EACtBlB,EAAgBe,GAAM,SCzCpBI,oPAA2Bd,OAAOe,8BACtC,SAAAD,IAAc,IAAAE,EAAA,mGAAAC,CAAAC,KAAAJ,IACZE,EAAAG,EAAAC,KAAAF,OAEKG,kBAAoB,uBAEzBL,EAAKM,QAAS,EACdN,EAAKO,SANOP,gDAUZE,KAAKI,QAAUJ,KAAKI,OACpBJ,KAAKM,0CAOL,IAAMC,EAAYP,KAAKQ,WAAWC,cAAc,0BAE5CC,EAAkB,KAClBV,KAAKI,QACPM,EAAkBV,KAAKQ,WAAWC,cAAc,2BAA2BE,QAC3EJ,EAAUK,MAAMC,WAAa,4BAC7BN,EAAUK,MAAM,cAAgB,SAChCL,EAAUK,MAAM,kBAAoB,SAEpCF,EAAkBV,KAAKQ,WAAWC,cAAc,2BAA2BE,QAC3EJ,EAAUK,MAAMC,WAAa,2CAC7BN,EAAUK,MAAM,cAAgB,IAChCL,EAAUK,MAAM,kBAAoB,KAGtC,IAAME,EAAcJ,EAAgBK,WAAU,GAC9CD,EAAYL,cAAc,KAAKO,aAAa,eAAgB,WAE5D,IAAMC,EAASjB,KAAKQ,WAAWC,cAAc,gCACzCQ,EAAOR,cAAc,4BACvBQ,EAAOC,aAAaJ,EAAaG,EAAOR,cAAc,6BAEtDQ,EAAOE,YAAYL,oCAQd,IAAAM,EAAApB,KAEDqB,EADkBC,SAASb,cAAcT,KAAKG,mBAAmBQ,QACnCI,WAAU,GACxCR,EAAYc,EAAYZ,cAAc,0BAEtCC,EAAkBW,EAAYZ,cAAc,2BAA2BE,QAC7EJ,EAAUK,MAAMC,WAAa,4BAC7BN,EAAUK,MAAM,cAAgB,SAChCL,EAAUK,MAAM,kBAAoB,OAEpC,IAAME,EAAcJ,EAAgBK,WAAU,GAC9CD,EAAYL,cAAc,KAAKO,aAAa,eAAgB,WAE5D,IAAMC,EAASI,EAAYZ,cAAc,gCACzCQ,EAAOE,YAAYL,GACnBG,EAAOM,QAAUvB,KAAKwB,OAAOC,KAAKzB,MAElCA,KAAK0B,aAAa,CAAEC,KAAM,SAE1B3B,KAAKQ,WAAWoB,UAAY,GAE5BN,SAASO,iBAAiB,cAAcC,SAAQ,SAAAlB,GAC9CQ,EAAKZ,WAAWW,YAAYP,EAAMG,WAAU,OAE9CO,SAASO,iBAAiB,aAAaC,SAAQ,SAAAC,GAC7CX,EAAKZ,WAAWW,YAAYY,EAAKhB,WAAU,OAG7CiB,IAAAC,IAAIC,MAAM,CACRC,mBAAoBnC,KAAKQ,WACzB4B,qBAAsBpC,KAAKQ,aAI7BR,KAAKQ,WAAWW,YAAYE,wCAIhCvC,OAAOuD,eAAeC,OAAO,sBAAuB1C","sources":["/home/runner/work/carleton-web-dev/carleton-web-dev/node_modules/@parcel/scope-hoisting/lib/prelude.js","src/wc-course-website/components/collapsibleContent/index.js"],"names":["$parcel$modules","$parcel$bundles","globalObject","globalThis","self","window","global","parcelRequire","name","module","require","err","Error","code","register","id","exports","registerBundle","fn","CollapsibleContent","HTMLElement","_this","$f14d863edacf08883710da00a67d8c5$var$_classCallCheck","this","_super","call","contentTemplateId","opened","render","update","innerNode","shadowRoot","querySelector","chevronTemplate","content","style","transition","chevronNode","cloneNode","setAttribute","button","replaceChild","appendChild","_this2","contentNode","document","onclick","toggle","bind","attachShadow","mode","innerHTML","querySelectorAll","forEach","link","$cc88967be97a9f9f4b82b626210467f$init","dom","watch","autoReplaceSvgRoot","observeMutationsRoot","customElements","define"],"version":3,"file":"forums.c11e3e17.js.map","sourcesContent":[null,"import { dom } from '@fortawesome/fontawesome-svg-core';\n\nclass CollapsibleContent extends window.HTMLElement {\n  constructor() {\n    super();\n\n    this.contentTemplateId = '#collapsible-content';\n\n    this.opened = true;\n    this.render();\n  }\n\n  toggle() {\n    this.opened = !this.opened;\n    this.update();\n  }\n\n  /**\n   * Updates the content of the collapsible content without deleting the entire HTML.\n   */\n  update() {\n    const innerNode = this.shadowRoot.querySelector('[data-element=\"inner\"]');\n\n    let chevronTemplate = null;\n    if (this.opened) {\n      chevronTemplate = this.shadowRoot.querySelector('[data-element=\"opened\"]').content;\n      innerNode.style.transition = 'max-height 1s ease-in-out';\n      innerNode.style['max-height'] = '9000px';\n      innerNode.style['padding-bottom'] = '20px';\n    } else {\n      chevronTemplate = this.shadowRoot.querySelector('[data-element=\"closed\"]').content;\n      innerNode.style.transition = 'max-height 0.5s cubic-bezier(0, 1, 0, 1)';\n      innerNode.style['max-height'] = '0';\n      innerNode.style['padding-bottom'] = '0';\n    }\n\n    const chevronNode = chevronTemplate.cloneNode(true);\n    chevronNode.querySelector('i').setAttribute('data-element', 'chevron');\n\n    const button = this.shadowRoot.querySelector('[data-element=\"icon-button\"]');\n    if (button.querySelector('[data-element=\"chevron\"]')) {\n      button.replaceChild(chevronNode, button.querySelector('[data-element=\"chevron\"]'));\n    } else {\n      button.appendChild(chevronNode);\n    }\n  }\n\n  /**\n   * Renders the collapsible content and it's template inside of the DOM structure. Will delete all the HTML that\n   * existed in this node beforehand.\n   */\n  render() {\n    const contentTemplate = document.querySelector(this.contentTemplateId).content;\n    const contentNode = contentTemplate.cloneNode(true);\n    const innerNode = contentNode.querySelector('[data-element=\"inner\"]');\n\n    const chevronTemplate = contentNode.querySelector('[data-element=\"opened\"]').content;\n    innerNode.style.transition = 'max-height 1s ease-in-out';\n    innerNode.style['max-height'] = '9000px';\n    innerNode.style['padding-bottom'] = '20px';\n\n    const chevronNode = chevronTemplate.cloneNode(true);\n    chevronNode.querySelector('i').setAttribute('data-element', 'chevron');\n\n    const button = contentNode.querySelector('[data-element=\"icon-button\"]');\n    button.appendChild(chevronNode);\n    button.onclick = this.toggle.bind(this);\n\n    this.attachShadow({ mode: 'open' });\n\n    this.shadowRoot.innerHTML = '';\n    // Add styles defined in the head\n    document.querySelectorAll('head style').forEach(style => {\n      this.shadowRoot.appendChild(style.cloneNode(true));\n    });\n    document.querySelectorAll('head link').forEach(link => {\n      this.shadowRoot.appendChild(link.cloneNode(true));\n    });\n\n    dom.watch({\n      autoReplaceSvgRoot: this.shadowRoot,\n      observeMutationsRoot: this.shadowRoot\n    });\n\n    // Add the content from the templates\n    this.shadowRoot.appendChild(contentNode);\n  }\n}\n\nwindow.customElements.define('collapsible-content', CollapsibleContent);\n"]}